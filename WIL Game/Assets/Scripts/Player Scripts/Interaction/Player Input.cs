//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player Scripts/Interaction/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""PlayerInteraction"",
            ""id"": ""fc310c59-04d6-4929-a855-2c8c1e9523c6"",
            ""actions"": [
                {
                    ""name"": ""ShowMenu"",
                    ""type"": ""Button"",
                    ""id"": ""0b3272b1-2236-4b7f-b3c6-4981561c6387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""054d728c-1fb5-483a-ac8c-c196809fe499"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShowMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Base Player Movement"",
            ""id"": ""924fcd8c-8bd2-4235-abe2-45c725172a5b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cf49a117-4ff4-4617-bd0f-4fdf9ad630b7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement Modifiers"",
                    ""type"": ""Button"",
                    ""id"": ""bcbba67b-7cbd-41cd-99f1-ef74cdd606a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash Movement"",
                    ""type"": ""Button"",
                    ""id"": ""bbd3d0de-5c5b-49ea-b7df-bbfbc8e0a450"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DashReading"",
                    ""type"": ""PassThrough"",
                    ""id"": ""385f0524-e241-4e85-9f0e-8cf41a333bdc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""c9e963e4-e0d2-4e5a-98c5-dc792269139e"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""619cf8bc-35e8-4d46-a0cd-a7edcba86cab"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""de4257c5-9574-4d67-bbcb-ce5abc09b7c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""fe974fcf-323f-45c7-8e85-24b562aad8e6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""439a2d9f-e12b-45a1-b03d-ce451cb02b21"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b5e94c5b-576a-4a89-9088-df47c235bd07"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Hold(duration=0.25,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement Modifiers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Dash Vector"",
                    ""id"": ""ba5f1d67-791a-4b4e-9a7c-209e78fa47ec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashReading"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3006bf49-a64d-47bc-b718-83f6af6265cf"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashReading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4197e835-45fc-45d2-a18a-124f82a3dd4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashReading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ab7d3472-96f7-4120-85bd-225278c3d03f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashReading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""082adad9-e7fa-41ec-95ca-d1c9cd3e19b2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DashReading"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""12f3e2cc-9506-4f19-b016-3c843e898311"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerAttack"",
            ""id"": ""50ff9ac7-f556-418d-ace2-43ac0f970f89"",
            ""actions"": [
                {
                    ""name"": ""Primary Attack"",
                    ""type"": ""Button"",
                    ""id"": ""30e8abb0-54b2-4f06-b815-cac8d8f83a30"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7efce37b-30cd-46a9-bc91-1250a362a38a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Third Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ffe18392-07f1-43c6-9bb1-74e9cb75634c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e70e226c-d24c-4116-ba67-065be466682d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c093973a-7323-47e6-9eaa-92018b086950"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""443aa6a3-ee0f-45cd-84a0-c20a21d9d1eb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Third Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInteraction
        m_PlayerInteraction = asset.FindActionMap("PlayerInteraction", throwIfNotFound: true);
        m_PlayerInteraction_ShowMenu = m_PlayerInteraction.FindAction("ShowMenu", throwIfNotFound: true);
        // Base Player Movement
        m_BasePlayerMovement = asset.FindActionMap("Base Player Movement", throwIfNotFound: true);
        m_BasePlayerMovement_Movement = m_BasePlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_BasePlayerMovement_MovementModifiers = m_BasePlayerMovement.FindAction("Movement Modifiers", throwIfNotFound: true);
        m_BasePlayerMovement_DashMovement = m_BasePlayerMovement.FindAction("Dash Movement", throwIfNotFound: true);
        m_BasePlayerMovement_DashReading = m_BasePlayerMovement.FindAction("DashReading", throwIfNotFound: true);
        // PlayerAttack
        m_PlayerAttack = asset.FindActionMap("PlayerAttack", throwIfNotFound: true);
        m_PlayerAttack_PrimaryAttack = m_PlayerAttack.FindAction("Primary Attack", throwIfNotFound: true);
        m_PlayerAttack_SecondaryAttack = m_PlayerAttack.FindAction("Secondary Attack", throwIfNotFound: true);
        m_PlayerAttack_ThirdAttack = m_PlayerAttack.FindAction("Third Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInteraction
    private readonly InputActionMap m_PlayerInteraction;
    private List<IPlayerInteractionActions> m_PlayerInteractionActionsCallbackInterfaces = new List<IPlayerInteractionActions>();
    private readonly InputAction m_PlayerInteraction_ShowMenu;
    public struct PlayerInteractionActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerInteractionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShowMenu => m_Wrapper.m_PlayerInteraction_ShowMenu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Add(instance);
            @ShowMenu.started += instance.OnShowMenu;
            @ShowMenu.performed += instance.OnShowMenu;
            @ShowMenu.canceled += instance.OnShowMenu;
        }

        private void UnregisterCallbacks(IPlayerInteractionActions instance)
        {
            @ShowMenu.started -= instance.OnShowMenu;
            @ShowMenu.performed -= instance.OnShowMenu;
            @ShowMenu.canceled -= instance.OnShowMenu;
        }

        public void RemoveCallbacks(IPlayerInteractionActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInteractionActions @PlayerInteraction => new PlayerInteractionActions(this);

    // Base Player Movement
    private readonly InputActionMap m_BasePlayerMovement;
    private List<IBasePlayerMovementActions> m_BasePlayerMovementActionsCallbackInterfaces = new List<IBasePlayerMovementActions>();
    private readonly InputAction m_BasePlayerMovement_Movement;
    private readonly InputAction m_BasePlayerMovement_MovementModifiers;
    private readonly InputAction m_BasePlayerMovement_DashMovement;
    private readonly InputAction m_BasePlayerMovement_DashReading;
    public struct BasePlayerMovementActions
    {
        private @PlayerInput m_Wrapper;
        public BasePlayerMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_BasePlayerMovement_Movement;
        public InputAction @MovementModifiers => m_Wrapper.m_BasePlayerMovement_MovementModifiers;
        public InputAction @DashMovement => m_Wrapper.m_BasePlayerMovement_DashMovement;
        public InputAction @DashReading => m_Wrapper.m_BasePlayerMovement_DashReading;
        public InputActionMap Get() { return m_Wrapper.m_BasePlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasePlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IBasePlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_BasePlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasePlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @MovementModifiers.started += instance.OnMovementModifiers;
            @MovementModifiers.performed += instance.OnMovementModifiers;
            @MovementModifiers.canceled += instance.OnMovementModifiers;
            @DashMovement.started += instance.OnDashMovement;
            @DashMovement.performed += instance.OnDashMovement;
            @DashMovement.canceled += instance.OnDashMovement;
            @DashReading.started += instance.OnDashReading;
            @DashReading.performed += instance.OnDashReading;
            @DashReading.canceled += instance.OnDashReading;
        }

        private void UnregisterCallbacks(IBasePlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @MovementModifiers.started -= instance.OnMovementModifiers;
            @MovementModifiers.performed -= instance.OnMovementModifiers;
            @MovementModifiers.canceled -= instance.OnMovementModifiers;
            @DashMovement.started -= instance.OnDashMovement;
            @DashMovement.performed -= instance.OnDashMovement;
            @DashMovement.canceled -= instance.OnDashMovement;
            @DashReading.started -= instance.OnDashReading;
            @DashReading.performed -= instance.OnDashReading;
            @DashReading.canceled -= instance.OnDashReading;
        }

        public void RemoveCallbacks(IBasePlayerMovementActions instance)
        {
            if (m_Wrapper.m_BasePlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasePlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_BasePlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasePlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasePlayerMovementActions @BasePlayerMovement => new BasePlayerMovementActions(this);

    // PlayerAttack
    private readonly InputActionMap m_PlayerAttack;
    private List<IPlayerAttackActions> m_PlayerAttackActionsCallbackInterfaces = new List<IPlayerAttackActions>();
    private readonly InputAction m_PlayerAttack_PrimaryAttack;
    private readonly InputAction m_PlayerAttack_SecondaryAttack;
    private readonly InputAction m_PlayerAttack_ThirdAttack;
    public struct PlayerAttackActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerAttackActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryAttack => m_Wrapper.m_PlayerAttack_PrimaryAttack;
        public InputAction @SecondaryAttack => m_Wrapper.m_PlayerAttack_SecondaryAttack;
        public InputAction @ThirdAttack => m_Wrapper.m_PlayerAttack_ThirdAttack;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAttackActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerAttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerAttackActionsCallbackInterfaces.Add(instance);
            @PrimaryAttack.started += instance.OnPrimaryAttack;
            @PrimaryAttack.performed += instance.OnPrimaryAttack;
            @PrimaryAttack.canceled += instance.OnPrimaryAttack;
            @SecondaryAttack.started += instance.OnSecondaryAttack;
            @SecondaryAttack.performed += instance.OnSecondaryAttack;
            @SecondaryAttack.canceled += instance.OnSecondaryAttack;
            @ThirdAttack.started += instance.OnThirdAttack;
            @ThirdAttack.performed += instance.OnThirdAttack;
            @ThirdAttack.canceled += instance.OnThirdAttack;
        }

        private void UnregisterCallbacks(IPlayerAttackActions instance)
        {
            @PrimaryAttack.started -= instance.OnPrimaryAttack;
            @PrimaryAttack.performed -= instance.OnPrimaryAttack;
            @PrimaryAttack.canceled -= instance.OnPrimaryAttack;
            @SecondaryAttack.started -= instance.OnSecondaryAttack;
            @SecondaryAttack.performed -= instance.OnSecondaryAttack;
            @SecondaryAttack.canceled -= instance.OnSecondaryAttack;
            @ThirdAttack.started -= instance.OnThirdAttack;
            @ThirdAttack.performed -= instance.OnThirdAttack;
            @ThirdAttack.canceled -= instance.OnThirdAttack;
        }

        public void RemoveCallbacks(IPlayerAttackActions instance)
        {
            if (m_Wrapper.m_PlayerAttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerAttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerAttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerAttackActions @PlayerAttack => new PlayerAttackActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerInteractionActions
    {
        void OnShowMenu(InputAction.CallbackContext context);
    }
    public interface IBasePlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMovementModifiers(InputAction.CallbackContext context);
        void OnDashMovement(InputAction.CallbackContext context);
        void OnDashReading(InputAction.CallbackContext context);
    }
    public interface IPlayerAttackActions
    {
        void OnPrimaryAttack(InputAction.CallbackContext context);
        void OnSecondaryAttack(InputAction.CallbackContext context);
        void OnThirdAttack(InputAction.CallbackContext context);
    }
}
